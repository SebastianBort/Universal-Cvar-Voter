/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>

#define PLUGIN "Universal Cvar Voter"
#define VERSION "1.1"
#define AUTHOR "Sebastian Bort"

//
// config below
//
new const cvar[] = "mp_timelimit";
new const options[] = { 10, 12, 14, 16 };

#define MESSAGE_QUESTION "Ile chcesz rund?"
#define MESSAGE_ANSWER "%d rund"
#define MESSAGE_VOTE "[AMXX] %s zaglosowal na %d rund"
#define MESSAGE_RESULTS "[AMXX] Gramy %d rund"
//
// end config
//

new choises[sizeof options + 1];

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	set_task(15.0, "start_vote");
}

public start_vote(id)
{	
	new menu = menu_create(MESSAGE_QUESTION, "menu_handler");
	
	new menu_text[64], menu_pos[2];
	for(new i = 0; i < sizeof options; i++) {
		formatex(menu_text, 63, MESSAGE_ANSWER, options[i]);
		formatex(menu_pos, 1, "%d", i + 1);		
		menu_additem(menu, menu_text, menu_pos, 0);		
	}
	
	menu_addblank(menu, 0);
	menu_setprop(menu, MPROP_EXIT, MEXIT_NEVER);
	
	new players[32], inum
	get_players(players, inum, "ch")
	for(new i = 0; i < inum; i++)
	{
		menu_display(players[i], menu, 0);
	}
	
	set_task(15.0, "finish_vote");
	
	for(new i = 0; i < sizeof choises; i++) {
		choises[i] = 0;
	}
}

public menu_handler(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_cancel(id);
		return;
	}
	
	new data[6], name[32];
	new access, callback;
	
	menu_item_getinfo(menu, item, access, data, 5, _, _, callback);
	
	new key = str_to_num(data);
	get_user_name(id, name, 31);
	
	choises[key - 1]++;
	
	client_print(0, print_chat, MESSAGE_VOTE, name, options[key - 1]);	
	
	menu_cancel(id);
}

public finish_vote()
{
	new highest_score = 0, current_select = 0;
	for(new i = 0; i < sizeof choises; i++) {		
		if(!highest_score || choises[i] >= highest_score) {
			highest_score = choises[i];
			current_select = i;
		}		
	}	
	client_print(0, print_chat, MESSAGE_RESULTS, options[current_select]);	
	set_cvar_num(cvar, options[current_select]);
}  
